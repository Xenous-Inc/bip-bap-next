generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  ADMIN
  USER
  GUEST
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  type          UserType
  sensors       Sensor[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SensorDataType {
  PM10
  PM25
  OZON
}

model SensorData {
  id        String            @id @default(cuid())
  type      SensorDataType
  value     Float
  isDeleted Boolean
  sensor  Sensor @relation(fields: [sensorId], references: [id])
  sensorId  String 
} 

model Sensor {
  id               String         @id @default(cuid())
  name             String      @unique
  model            Int
  version          Float
  firmwareVersion  String
  serialNumber     String
  coordinates      Float[]
  values           SensorData[]
  ownerId          String  
  owner            User @relation( fields: [ownerId], references: [id])

}
