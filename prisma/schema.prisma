generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  type          UserType
  password      String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  // sensors       Sensor[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SensorData {
  id        String         @id @default(cuid())
  type      SensorDataType
  value     Float
  isDeleted Boolean
  sensorId  String
  sensor    Sensor         @relation(fields: [sensorId], references: [id])
}

model Sensor {
  id              String       @id @default(cuid())
  name            String       @unique
  model           String
  version         Float
  firmwareVersion String
  serialNumber    String
  latitude        Float
  longitude       Float
  values          SensorData[]
}

enum UserType {
  ADMIN
  USER
  GUEST
}

enum SensorDataType {
  PM10
  PM25
  OZON
}
